Conflict in state 85 between rule 41 and token TOK_ADD resolved as reduce.
Conflict in state 85 between rule 41 and token TOK_SUB resolved as reduce.
Conflict in state 85 between rule 41 and token TOK_MUL resolved as shift.
Conflict in state 85 between rule 41 and token TOK_DIV resolved as shift.
Conflict in state 86 between rule 43 and token TOK_ADD resolved as reduce.
Conflict in state 86 between rule 43 and token TOK_SUB resolved as reduce.
Conflict in state 86 between rule 43 and token TOK_MUL resolved as shift.
Conflict in state 86 between rule 43 and token TOK_DIV resolved as shift.
Conflict in state 87 between rule 44 and token TOK_ADD resolved as reduce.
Conflict in state 87 between rule 44 and token TOK_SUB resolved as reduce.
Conflict in state 87 between rule 44 and token TOK_MUL resolved as reduce.
Conflict in state 87 between rule 44 and token TOK_DIV resolved as reduce.
Conflict in state 88 between rule 42 and token TOK_ADD resolved as reduce.
Conflict in state 88 between rule 42 and token TOK_SUB resolved as reduce.
Conflict in state 88 between rule 42 and token TOK_MUL resolved as reduce.
Conflict in state 88 between rule 42 and token TOK_DIV resolved as reduce.

Grammar
rule 1    prog -> struct
rule 2    prog -> TOK_INCLUDE prog
rule 3    struct -> main
rule 4    struct -> structdefs struct
rule 5    structdefs -> TOK_STRUCT TOK_CHA_DIR vardefs TOK_CHA_ESQ TOK_IDENT TOK_SEMICOLON
rule 6    main -> TOK_VOID TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 7    main -> TOK_INT TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 8    main ->		/* empty */
rule 9    stmts ->		/* empty */
rule 10   stmts -> stmt TOK_SEMICOLON stmts
rule 11   stmts -> ciclesAndOther stmts
rule 12   stmts -> vardef TOK_SEMICOLON stmts
rule 13   vardefs ->		/* empty */
rule 14   vardefs -> vardef TOK_SEMICOLON vardefs
rule 15   vardef -> TOK_INT TOK_IDENT
rule 16   vardef -> TOK_INT TOK_IDENT_ERR
rule 17   vardef -> TOK_FLOAT TOK_IDENT
rule 18   vardef -> TOK_FLOAT TOK_IDENT_ERR
rule 19   vardef -> TOK_CHAR TOK_IDENT
rule 20   vardef -> TOK_CHAR TOK_IDENT_ERR
rule 21   vardef ->		/* empty */
rule 22   ciclesAndOther -> whileCicle
rule 23   ciclesAndOther -> ifCond
rule 24   ciclesAndOther -> forCicle
rule 25   whileCicle -> TOK_WHILE TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 26   ifCond -> TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 27   ifCond -> TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 28   forCicle -> TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 29   forCicle -> TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ
rule 30   exprBol -> TOK_IDENT TOK_DIFERENT expr
rule 31   exprBol -> TOK_IDENT TOK_EQUAL_EQUAL expr
rule 32   exprBol -> TOK_IDENT TOK_LOWER_EQUAL expr
rule 33   exprBol -> TOK_IDENT TOK_LOWER expr
rule 34   exprBol -> TOK_IDENT TOK_GREATER_EQUAL expr
rule 35   exprBol -> TOK_IDENT TOK_GREATER expr
rule 36   stmt -> TOK_IDENT TOK_EQ expr
rule 37   stmt -> TOK_IDENT TOK_EQ TOK_ONE_CHAR
rule 38   stmt -> TOK_PRINTID TOK_PAR_CUR_ESQ TOK_IDENT TOK_PAR_CUR_DIR
rule 39   stmt -> TOK_PRINTID TOK_PAR_CUR_ESQ TOK_UNDERSCORE expr TOK_UNDERSCORE TOK_PAR_CUR_DIR
rule 40   stmt -> TOK_PRINTID TOK_PAR_CUR_ESQ TOK_STR TOK_PAR_CUR_DIR
rule 41   expr -> expr TOK_ADD expr
rule 42   expr -> expr TOK_DIV expr
rule 43   expr -> expr TOK_SUB expr
rule 44   expr -> expr TOK_MUL expr
rule 45   expr -> TOK_IDENT
rule 46   expr -> RAW
rule 47   RAW -> TOK_NUM
rule 48   RAW -> TOK_FNUM

Terminals, with rules where they appear

$ (-1)
error (256)
TOK_SEMICOLON (258) 5 10 12 14 28 29
TOK_ADD (259) 28 29 41
TOK_SUB (260) 43
TOK_MUL (261) 44
TOK_DIV (262) 42
TOK_EQ (263) 28 29 36 37
TOK_INT (264) 7 15 16
TOK_FLOAT (265) 17 18
TOK_IDENT (266) 5 15 17 19 28 29 30 31 32 33 34 35 36 37 38 45
TOK_PRINTID (267) 38 39 40
TOK_MAIN (268) 6 7
TOK_CHA_DIR (269) 5 6 7 25 26 27 28 29
TOK_CHA_ESQ (270) 5 6 7 25 26 27 28 29
TOK_IDENT_ERR (271) 16 18 20
TOK_INCLUDE (272) 2
TOK_STRUCT (273) 5
TOK_WHILE (274) 25
TOK_FOR (275) 28 29
TOK_IF (276) 26 27
TOK_ELSE (277) 27
TOK_PAR_CUR_ESQ (278) 25 26 27 28 29 38 39 40
TOK_PAR_CUR_DIR (279) 25 26 27 28 29 38 39 40
TOK_LOWER_EQUAL (280) 32
TOK_GREATER_EQUAL (281) 34
TOK_EQUAL_EQUAL (282) 31
TOK_DIFERENT (283) 30
TOK_GREATER (284) 35
TOK_LOWER (285) 33
TOK_STR (286) 40
TOK_CHAR (287) 19 20
TOK_ONE_CHAR (288) 37
TOK_VOID (289) 6
TOK_UNDERSCORE (290) 39
TOK_NUM (291) 29 47
TOK_FNUM (292) 48

Nonterminals, with rules where they appear

prog (38)
    on left: 1 2, on right: 2
struct (39)
    on left: 3 4, on right: 1 4
structdefs (40)
    on left: 5, on right: 4
main (41)
    on left: 6 7 8, on right: 3
stmts (42)
    on left: 9 10 11 12, on right: 6 7 10 11 12 25 26 27 28 29
vardefs (43)
    on left: 13 14, on right: 5 14
vardef (44)
    on left: 15 16 17 18 19 20 21, on right: 12 14
ciclesAndOther (45)
    on left: 22 23 24, on right: 11
whileCicle (46)
    on left: 25, on right: 22
ifCond (47)
    on left: 26 27, on right: 23
forCicle (48)
    on left: 28 29, on right: 24
exprBol (49)
    on left: 30 31 32 33 34 35, on right: 25 26 27 28 29
stmt (50)
    on left: 36 37 38 39 40, on right: 10
expr (51)
    on left: 41 42 43 44 45 46, on right: 30 31 32 33 34 35 36 39 41
    42 43 44
RAW (52)
    on left: 47 48, on right: 46


state 0

    TOK_INT	shift, and go to state 1
    TOK_INCLUDE	shift, and go to state 2
    TOK_STRUCT	shift, and go to state 3
    TOK_VOID	shift, and go to state 4

    $default	reduce using rule 8 (main)

    prog	go to state 129
    struct	go to state 5
    structdefs	go to state 6
    main	go to state 7



state 1

    main  ->  TOK_INT . TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 7)

    TOK_MAIN	shift, and go to state 8



state 2

    prog  ->  TOK_INCLUDE . prog   (rule 2)

    TOK_INT	shift, and go to state 1
    TOK_INCLUDE	shift, and go to state 2
    TOK_STRUCT	shift, and go to state 3
    TOK_VOID	shift, and go to state 4

    $default	reduce using rule 8 (main)

    prog	go to state 9
    struct	go to state 5
    structdefs	go to state 6
    main	go to state 7



state 3

    structdefs  ->  TOK_STRUCT . TOK_CHA_DIR vardefs TOK_CHA_ESQ TOK_IDENT TOK_SEMICOLON   (rule 5)

    TOK_CHA_DIR	shift, and go to state 10



state 4

    main  ->  TOK_VOID . TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 6)

    TOK_MAIN	shift, and go to state 11



state 5

    prog  ->  struct .   (rule 1)

    $default	reduce using rule 1 (prog)



state 6

    struct  ->  structdefs . struct   (rule 4)

    TOK_INT	shift, and go to state 1
    TOK_STRUCT	shift, and go to state 3
    TOK_VOID	shift, and go to state 4

    $default	reduce using rule 8 (main)

    struct	go to state 12
    structdefs	go to state 6
    main	go to state 7



state 7

    struct  ->  main .   (rule 3)

    $default	reduce using rule 3 (struct)



state 8

    main  ->  TOK_INT TOK_MAIN . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 7)

    TOK_CHA_DIR	shift, and go to state 13



state 9

    prog  ->  TOK_INCLUDE prog .   (rule 2)

    $default	reduce using rule 2 (prog)



state 10

    structdefs  ->  TOK_STRUCT TOK_CHA_DIR . vardefs TOK_CHA_ESQ TOK_IDENT TOK_SEMICOLON   (rule 5)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 13 (vardefs)

    vardefs	go to state 17
    vardef	go to state 18



state 11

    main  ->  TOK_VOID TOK_MAIN . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 6)

    TOK_CHA_DIR	shift, and go to state 19



state 12

    struct  ->  structdefs struct .   (rule 4)

    $default	reduce using rule 4 (struct)



state 13

    main  ->  TOK_INT TOK_MAIN TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 7)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 25
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 14

    vardef  ->  TOK_INT . TOK_IDENT   (rule 15)
    vardef  ->  TOK_INT . TOK_IDENT_ERR   (rule 16)

    TOK_IDENT	shift, and go to state 32
    TOK_IDENT_ERR	shift, and go to state 33



state 15

    vardef  ->  TOK_FLOAT . TOK_IDENT   (rule 17)
    vardef  ->  TOK_FLOAT . TOK_IDENT_ERR   (rule 18)

    TOK_IDENT	shift, and go to state 34
    TOK_IDENT_ERR	shift, and go to state 35



state 16

    vardef  ->  TOK_CHAR . TOK_IDENT   (rule 19)
    vardef  ->  TOK_CHAR . TOK_IDENT_ERR   (rule 20)

    TOK_IDENT	shift, and go to state 36
    TOK_IDENT_ERR	shift, and go to state 37



state 17

    structdefs  ->  TOK_STRUCT TOK_CHA_DIR vardefs . TOK_CHA_ESQ TOK_IDENT TOK_SEMICOLON   (rule 5)

    TOK_CHA_ESQ	shift, and go to state 38



state 18

    vardefs  ->  vardef . TOK_SEMICOLON vardefs   (rule 14)

    TOK_SEMICOLON	shift, and go to state 39



state 19

    main  ->  TOK_VOID TOK_MAIN TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 6)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 40
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 20

    stmt  ->  TOK_IDENT . TOK_EQ expr   (rule 36)
    stmt  ->  TOK_IDENT . TOK_EQ TOK_ONE_CHAR   (rule 37)

    TOK_EQ	shift, and go to state 41



state 21

    stmt  ->  TOK_PRINTID . TOK_PAR_CUR_ESQ TOK_IDENT TOK_PAR_CUR_DIR   (rule 38)
    stmt  ->  TOK_PRINTID . TOK_PAR_CUR_ESQ TOK_UNDERSCORE expr TOK_UNDERSCORE TOK_PAR_CUR_DIR   (rule 39)
    stmt  ->  TOK_PRINTID . TOK_PAR_CUR_ESQ TOK_STR TOK_PAR_CUR_DIR   (rule 40)

    TOK_PAR_CUR_ESQ	shift, and go to state 42



state 22

    whileCicle  ->  TOK_WHILE . TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 25)

    TOK_PAR_CUR_ESQ	shift, and go to state 43



state 23

    forCicle  ->  TOK_FOR . TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)
    forCicle  ->  TOK_FOR . TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_PAR_CUR_ESQ	shift, and go to state 44



state 24

    ifCond  ->  TOK_IF . TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF . TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_PAR_CUR_ESQ	shift, and go to state 45



state 25

    main  ->  TOK_INT TOK_MAIN TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 7)

    TOK_CHA_ESQ	shift, and go to state 46



state 26

    stmts  ->  vardef . TOK_SEMICOLON stmts   (rule 12)

    TOK_SEMICOLON	shift, and go to state 47



state 27

    stmts  ->  ciclesAndOther . stmts   (rule 11)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 48
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 28

    ciclesAndOther  ->  whileCicle .   (rule 22)

    $default	reduce using rule 22 (ciclesAndOther)



state 29

    ciclesAndOther  ->  ifCond .   (rule 23)

    $default	reduce using rule 23 (ciclesAndOther)



state 30

    ciclesAndOther  ->  forCicle .   (rule 24)

    $default	reduce using rule 24 (ciclesAndOther)



state 31

    stmts  ->  stmt . TOK_SEMICOLON stmts   (rule 10)

    TOK_SEMICOLON	shift, and go to state 49



state 32

    vardef  ->  TOK_INT TOK_IDENT .   (rule 15)

    $default	reduce using rule 15 (vardef)



state 33

    vardef  ->  TOK_INT TOK_IDENT_ERR .   (rule 16)

    $default	reduce using rule 16 (vardef)



state 34

    vardef  ->  TOK_FLOAT TOK_IDENT .   (rule 17)

    $default	reduce using rule 17 (vardef)



state 35

    vardef  ->  TOK_FLOAT TOK_IDENT_ERR .   (rule 18)

    $default	reduce using rule 18 (vardef)



state 36

    vardef  ->  TOK_CHAR TOK_IDENT .   (rule 19)

    $default	reduce using rule 19 (vardef)



state 37

    vardef  ->  TOK_CHAR TOK_IDENT_ERR .   (rule 20)

    $default	reduce using rule 20 (vardef)



state 38

    structdefs  ->  TOK_STRUCT TOK_CHA_DIR vardefs TOK_CHA_ESQ . TOK_IDENT TOK_SEMICOLON   (rule 5)

    TOK_IDENT	shift, and go to state 50



state 39

    vardefs  ->  vardef TOK_SEMICOLON . vardefs   (rule 14)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 13 (vardefs)

    vardefs	go to state 51
    vardef	go to state 18



state 40

    main  ->  TOK_VOID TOK_MAIN TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 6)

    TOK_CHA_ESQ	shift, and go to state 52



state 41

    stmt  ->  TOK_IDENT TOK_EQ . expr   (rule 36)
    stmt  ->  TOK_IDENT TOK_EQ . TOK_ONE_CHAR   (rule 37)

    TOK_IDENT	shift, and go to state 53
    TOK_ONE_CHAR	shift, and go to state 54
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 57
    RAW 	go to state 58



state 42

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ . TOK_IDENT TOK_PAR_CUR_DIR   (rule 38)
    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ . TOK_UNDERSCORE expr TOK_UNDERSCORE TOK_PAR_CUR_DIR   (rule 39)
    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ . TOK_STR TOK_PAR_CUR_DIR   (rule 40)

    TOK_IDENT	shift, and go to state 59
    TOK_STR	shift, and go to state 60
    TOK_UNDERSCORE	shift, and go to state 61



state 43

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ . exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 25)

    TOK_IDENT	shift, and go to state 62

    exprBol	go to state 63



state 44

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ . TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)
    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ . TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_IDENT	shift, and go to state 64



state 45

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ . exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ . exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_IDENT	shift, and go to state 62

    exprBol	go to state 65



state 46

    main  ->  TOK_INT TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 7)

    $default	reduce using rule 7 (main)



state 47

    stmts  ->  vardef TOK_SEMICOLON . stmts   (rule 12)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 66
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 48

    stmts  ->  ciclesAndOther stmts .   (rule 11)

    $default	reduce using rule 11 (stmts)



state 49

    stmts  ->  stmt TOK_SEMICOLON . stmts   (rule 10)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 67
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 50

    structdefs  ->  TOK_STRUCT TOK_CHA_DIR vardefs TOK_CHA_ESQ TOK_IDENT . TOK_SEMICOLON   (rule 5)

    TOK_SEMICOLON	shift, and go to state 68



state 51

    vardefs  ->  vardef TOK_SEMICOLON vardefs .   (rule 14)

    $default	reduce using rule 14 (vardefs)



state 52

    main  ->  TOK_VOID TOK_MAIN TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 6)

    $default	reduce using rule 6 (main)



state 53

    expr  ->  TOK_IDENT .   (rule 45)

    $default	reduce using rule 45 (expr)



state 54

    stmt  ->  TOK_IDENT TOK_EQ TOK_ONE_CHAR .   (rule 37)

    $default	reduce using rule 37 (stmt)



state 55

    RAW  ->  TOK_NUM .   (rule 47)

    $default	reduce using rule 47 (RAW)



state 56

    RAW  ->  TOK_FNUM .   (rule 48)

    $default	reduce using rule 48 (RAW)



state 57

    stmt  ->  TOK_IDENT TOK_EQ expr .   (rule 36)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 36 (stmt)



state 58

    expr  ->  RAW .   (rule 46)

    $default	reduce using rule 46 (expr)



state 59

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_IDENT . TOK_PAR_CUR_DIR   (rule 38)

    TOK_PAR_CUR_DIR	shift, and go to state 73



state 60

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_STR . TOK_PAR_CUR_DIR   (rule 40)

    TOK_PAR_CUR_DIR	shift, and go to state 74



state 61

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_UNDERSCORE . expr TOK_UNDERSCORE TOK_PAR_CUR_DIR   (rule 39)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 75
    RAW 	go to state 58



state 62

    exprBol  ->  TOK_IDENT . TOK_DIFERENT expr   (rule 30)
    exprBol  ->  TOK_IDENT . TOK_EQUAL_EQUAL expr   (rule 31)
    exprBol  ->  TOK_IDENT . TOK_LOWER_EQUAL expr   (rule 32)
    exprBol  ->  TOK_IDENT . TOK_LOWER expr   (rule 33)
    exprBol  ->  TOK_IDENT . TOK_GREATER_EQUAL expr   (rule 34)
    exprBol  ->  TOK_IDENT . TOK_GREATER expr   (rule 35)

    TOK_LOWER_EQUAL	shift, and go to state 76
    TOK_GREATER_EQUAL	shift, and go to state 77
    TOK_EQUAL_EQUAL	shift, and go to state 78
    TOK_DIFERENT	shift, and go to state 79
    TOK_GREATER	shift, and go to state 80
    TOK_LOWER	shift, and go to state 81



state 63

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ exprBol . TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 25)

    TOK_PAR_CUR_DIR	shift, and go to state 82



state 64

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT . TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)
    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT . TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_EQ	shift, and go to state 83



state 65

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol . TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol . TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_PAR_CUR_DIR	shift, and go to state 84



state 66

    stmts  ->  vardef TOK_SEMICOLON stmts .   (rule 12)

    $default	reduce using rule 12 (stmts)



state 67

    stmts  ->  stmt TOK_SEMICOLON stmts .   (rule 10)

    $default	reduce using rule 10 (stmts)



state 68

    structdefs  ->  TOK_STRUCT TOK_CHA_DIR vardefs TOK_CHA_ESQ TOK_IDENT TOK_SEMICOLON .   (rule 5)

    $default	reduce using rule 5 (structdefs)



state 69

    expr  ->  expr TOK_ADD . expr   (rule 41)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 85
    RAW 	go to state 58



state 70

    expr  ->  expr TOK_SUB . expr   (rule 43)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 86
    RAW 	go to state 58



state 71

    expr  ->  expr TOK_MUL . expr   (rule 44)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 87
    RAW 	go to state 58



state 72

    expr  ->  expr TOK_DIV . expr   (rule 42)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 88
    RAW 	go to state 58



state 73

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_IDENT TOK_PAR_CUR_DIR .   (rule 38)

    $default	reduce using rule 38 (stmt)



state 74

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_STR TOK_PAR_CUR_DIR .   (rule 40)

    $default	reduce using rule 40 (stmt)



state 75

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_UNDERSCORE expr . TOK_UNDERSCORE TOK_PAR_CUR_DIR   (rule 39)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72
    TOK_UNDERSCORE	shift, and go to state 89



state 76

    exprBol  ->  TOK_IDENT TOK_LOWER_EQUAL . expr   (rule 32)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 90
    RAW 	go to state 58



state 77

    exprBol  ->  TOK_IDENT TOK_GREATER_EQUAL . expr   (rule 34)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 91
    RAW 	go to state 58



state 78

    exprBol  ->  TOK_IDENT TOK_EQUAL_EQUAL . expr   (rule 31)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 92
    RAW 	go to state 58



state 79

    exprBol  ->  TOK_IDENT TOK_DIFERENT . expr   (rule 30)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 93
    RAW 	go to state 58



state 80

    exprBol  ->  TOK_IDENT TOK_GREATER . expr   (rule 35)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 94
    RAW 	go to state 58



state 81

    exprBol  ->  TOK_IDENT TOK_LOWER . expr   (rule 33)

    TOK_IDENT	shift, and go to state 53
    TOK_NUM	shift, and go to state 55
    TOK_FNUM	shift, and go to state 56

    expr	go to state 95
    RAW 	go to state 58



state 82

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 25)

    TOK_CHA_DIR	shift, and go to state 96



state 83

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ . TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)
    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ . TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_IDENT	shift, and go to state 97
    TOK_NUM	shift, and go to state 98



state 84

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR . TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_CHA_DIR	shift, and go to state 99



state 85

    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr TOK_ADD expr .   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 41 (expr)



state 86

    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr TOK_SUB expr .   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 43 (expr)



state 87

    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)
    expr  ->  expr TOK_MUL expr .   (rule 44)


    $default	reduce using rule 44 (expr)



state 88

    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr TOK_DIV expr .   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)


    $default	reduce using rule 42 (expr)



state 89

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_UNDERSCORE expr TOK_UNDERSCORE . TOK_PAR_CUR_DIR   (rule 39)

    TOK_PAR_CUR_DIR	shift, and go to state 100



state 90

    exprBol  ->  TOK_IDENT TOK_LOWER_EQUAL expr .   (rule 32)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 32 (exprBol)



state 91

    exprBol  ->  TOK_IDENT TOK_GREATER_EQUAL expr .   (rule 34)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 34 (exprBol)



state 92

    exprBol  ->  TOK_IDENT TOK_EQUAL_EQUAL expr .   (rule 31)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 31 (exprBol)



state 93

    exprBol  ->  TOK_IDENT TOK_DIFERENT expr .   (rule 30)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 30 (exprBol)



state 94

    exprBol  ->  TOK_IDENT TOK_GREATER expr .   (rule 35)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 35 (exprBol)



state 95

    exprBol  ->  TOK_IDENT TOK_LOWER expr .   (rule 33)
    expr  ->  expr . TOK_ADD expr   (rule 41)
    expr  ->  expr . TOK_DIV expr   (rule 42)
    expr  ->  expr . TOK_SUB expr   (rule 43)
    expr  ->  expr . TOK_MUL expr   (rule 44)

    TOK_ADD	shift, and go to state 69
    TOK_SUB	shift, and go to state 70
    TOK_MUL	shift, and go to state 71
    TOK_DIV	shift, and go to state 72

    $default	reduce using rule 33 (exprBol)



state 96

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 25)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 101
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 97

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT . TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_SEMICOLON	shift, and go to state 102



state 98

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM . TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_SEMICOLON	shift, and go to state 103



state 99

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR . stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 104
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 100

    stmt  ->  TOK_PRINTID TOK_PAR_CUR_ESQ TOK_UNDERSCORE expr TOK_UNDERSCORE TOK_PAR_CUR_DIR .   (rule 39)

    $default	reduce using rule 39 (stmt)



state 101

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 25)

    TOK_CHA_ESQ	shift, and go to state 105



state 102

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON . exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_IDENT	shift, and go to state 62

    exprBol	go to state 106



state 103

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON . exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_IDENT	shift, and go to state 62

    exprBol	go to state 107



state 104

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts . TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_CHA_ESQ	shift, and go to state 108



state 105

    whileCicle  ->  TOK_WHILE TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 25)

    $default	reduce using rule 25 (whileCicle)



state 106

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol . TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_SEMICOLON	shift, and go to state 109



state 107

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol . TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_SEMICOLON	shift, and go to state 110



state 108

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 26)
    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ . TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_ELSE	shift, and go to state 111

    $default	reduce using rule 26 (ifCond)



state 109

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON . TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_IDENT	shift, and go to state 112



state 110

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON . TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_IDENT	shift, and go to state 113



state 111

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 27)

    TOK_CHA_DIR	shift, and go to state 114



state 112

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT . TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_ADD	shift, and go to state 115



state 113

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT . TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_ADD	shift, and go to state 116



state 114

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 27)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 117
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 115

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD . TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_ADD	shift, and go to state 118



state 116

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD . TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_ADD	shift, and go to state 119



state 117

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 27)

    TOK_CHA_ESQ	shift, and go to state 120



state 118

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD . TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_PAR_CUR_DIR	shift, and go to state 121



state 119

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD . TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_PAR_CUR_DIR	shift, and go to state 122



state 120

    ifCond  ->  TOK_IF TOK_PAR_CUR_ESQ exprBol TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ TOK_ELSE TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 27)

    $default	reduce using rule 27 (ifCond)



state 121

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 28)

    TOK_CHA_DIR	shift, and go to state 123



state 122

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR . TOK_CHA_DIR stmts TOK_CHA_ESQ   (rule 29)

    TOK_CHA_DIR	shift, and go to state 124



state 123

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 28)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 125
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 124

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR . stmts TOK_CHA_ESQ   (rule 29)

    TOK_INT	shift, and go to state 14
    TOK_FLOAT	shift, and go to state 15
    TOK_IDENT	shift, and go to state 20
    TOK_PRINTID	shift, and go to state 21
    TOK_WHILE	shift, and go to state 22
    TOK_FOR	shift, and go to state 23
    TOK_IF	shift, and go to state 24
    TOK_CHAR	shift, and go to state 16

    TOK_SEMICOLON	reduce using rule 21 (vardef)
    TOK_UNDERSCORE	reduce using rule 21 (vardef)
    $default	reduce using rule 9 (stmts)

    stmts	go to state 126
    vardef	go to state 26
    ciclesAndOther	go to state 27
    whileCicle	go to state 28
    ifCond	go to state 29
    forCicle	go to state 30
    stmt	go to state 31



state 125

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 28)

    TOK_CHA_ESQ	shift, and go to state 127



state 126

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts . TOK_CHA_ESQ   (rule 29)

    TOK_CHA_ESQ	shift, and go to state 128



state 127

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_IDENT TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 28)

    $default	reduce using rule 28 (forCicle)



state 128

    forCicle  ->  TOK_FOR TOK_PAR_CUR_ESQ TOK_IDENT TOK_EQ TOK_NUM TOK_SEMICOLON exprBol TOK_SEMICOLON TOK_IDENT TOK_ADD TOK_ADD TOK_PAR_CUR_DIR TOK_CHA_DIR stmts TOK_CHA_ESQ .   (rule 29)

    $default	reduce using rule 29 (forCicle)



state 129

    $   	go to state 130



state 130

    $   	go to state 131



state 131

    $default	accept
